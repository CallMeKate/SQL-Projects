--This was a database for customer info and sales. I wanted to simulate, to a small degree, what working in a database that mirrored a real world equivalent looked like.

--How many orders were placed in January?

SELECT COUNT(orderID)
FROM BIT_DB.JanSales
WHERE length(orderid) = 6
AND orderid <> 'Order ID';

--How many of those orders were for an iPhone?

SELECT COUNT(orderID)
FROM BIT_DB.JanSales
WHERE product = 'iPhone'
AND length(orderid) = 6
AND orderid <> 'Order ID';

--Select the customer account numbers for all the orders that were placed in February.

SELECT DISTINCT acctnum
FROM BIT_DB.customers cust
INNER JOIN BIT_DB.FebSales Feb
ON cust.order_id = Feb.orderid
WHERE length(orderid) = 6
AND orderid <> 'Order ID';

--Which product was the cheapest one sold in January, and what was the price?

SELECT DISTINCT product, price
FROM BIT_DB.JanSales
WHERE price in (SELECT MIN(price) FROM BIT_DB.JanSales);

--What is the total revenue for each product sold in January?

SELECT DISTINCT SUM(quantity)*price AS revenue
FROM BIT_DB.JanSales
GROUP BY product;


--Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how 
--many of each were sold, and what was the total revenue?

SELECT SUM(quantity), product, SUM(quantity)*price AS revenue
FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY product;

--How many customers ordered more than 2 products at a time in February, and what
-- was the average amount spent for those customers?

SELECT COUNT(DISTINCT cust.acctnum), AVG(quantity*price)
FROM BIT_DB.FebSales AS Feb
LEFT JOIN BIT_DB.customers AS cust
ON Feb.orderid = cust.order_id
WHERE Feb.Quantity > 2
AND length(orderid) = 6
AND orderid <> 'OrderID';
